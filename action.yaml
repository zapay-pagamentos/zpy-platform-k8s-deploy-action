name: 'Deploy Application'
description: 'Deploy application in k8s'
inputs:
  aws-access-key-id:  # id of input
    description: 'AWS access key'
    required: true
  aws-secret-access-key:  # id of input
    description: 'AWS secret key'
    required: true
  aws-region:  # id of input
    description: 'AWS region'
    required: true
  ecr-repo:  # id of input
    description: 'ECR repository'
    required: true
  image-tag:  # id of input
    description: 'Image TAG'
    required: true
  cluster-name:  # id of input
    description: 'Cluster k8s name'
    required: true
  cluster-namespace:  # id of input
    description: 'Cluster k8s namespace'
    required: true
  new-relic-license-key:  # id of input
    description: 'New Relic license key'
    required: true
  application-name:  # id of input
    description: 'Chart name'
    required: true
  environment:  # id of input
    description: 'Environment'
    required: true
  doppler-token:  # id of input
    description: 'Doppler token'
    required: true
  helm-timeout:  # id of input
    description: 'Helm timeout value parameter'
    required: false
    default: '600s'
  state:  # id of input
    description: 'Detran microservices state'
    required: true
  update-newrelic:
    description: 'True if delete secret newrelic-license-key to update value'
    required: false
    default: 'false'
  values-name:
    description: 'Name of values file'
    required: false
    default: 'values.yaml'

runs:
  using: "composite"
  steps:
    ## Clone do c√≥digo
    - name: Check out code
      uses: actions/checkout@v2
    
    ## Configurando as credenciais AWS
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}
        mask-aws-account-id: 'no'
    
    ## Fazendo deploy da application no kubernetes
    - name: Deploy to k8s
      env:
        DOPPLER_TOKEN: ${{ inputs.doppler-token }}
        IMAGE_CREATED_REPO: ${{ inputs.ecr-repository }}
        IMAGE_CREATED_TAG: ${{ inputs.image-tag }}
        CLUSTER_REGION: ${{ inputs.aws-region }}
        CLUSTER_NAME: ${{ inputs.cluster-name }}
        CLUSTER_NAMESPACE: ${{ inputs.cluster-namespace }}
        NEW_RELIC_LICENSE_KEY: ${{ inputs.new-relic-license-key }}
        APPLICATION_NAME: ${{ inputs.application-name }}
        ENVIRONMENT: ${{ inputs.environment }}
        STATE: ${{ inputs.state }}
      shell: bash
      run: |
        aws eks update-kubeconfig --region $CLUSTER_REGION --name $CLUSTER_NAME
        kubectl get ns $CLUSTER_NAMESPACE || kubectl create ns $CLUSTER_NAMESPACE
        kubectl config set-context --current --namespace=$CLUSTER_NAMESPACE
        if [ ${{ inputs.update-newrelic }} == 'true'  ]; then kubectl delete secret newrelic-license-key --ignore-not-found; else echo "newrelic-license-key nao atualizado"; fi        
        kubectl get secret newrelic-license-key || kubectl create secret generic newrelic-license-key --from-literal=NEW_RELIC_LICENSE_KEY=$NEW_RELIC_LICENSE_KEY
        kubectl delete secret $APPLICATION_NAME-doppler-token --ignore-not-found
        kubectl create secret generic $APPLICATION_NAME-doppler-token --from-literal=DOPPLER_TOKEN=$DOPPLER_TOKEN
        kubectl delete secret $APPLICATION_NAME --ignore-not-found
        kubectl create secret generic $APPLICATION_NAME --from-env-file <(doppler secrets download --no-file --format docker)
        envsubst < ./.github/helm-deploy/$ENVIRONMENT/values.yaml | tee ./.github/helm-deploy/$ENVIRONMENT/values.yaml
        aws ecr get-login-password --region sa-east-1 | helm registry login --username AWS --password-stdin 071032557399.dkr.ecr.sa-east-1.amazonaws.com
        helm dependency build ./.github/helm-deploy/$ENVIRONMENT
        helm upgrade --atomic --timeout ${{ inputs.helm-timeout }} --debug --install $APPLICATION_NAME ./.github/helm-deploy/$ENVIRONMENT -f ./.github/helm-deploy/$ENVIRONMENT/${{ inputs.values-name }} -n $CLUSTER_NAMESPACE